name: Deploy to GCP Cloud Run

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  REGION: us-central1
  SERVICE_NAME: my-app
  IMAGE_NAME: us-central1-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/gcptest/gcptest:latest

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '13.3-slim' # Match the Dockerfile Python version

      - name: Install dependencies
        run: |
          
          pip install -r requirements.txt
        continue-on-error: false

      - name: Decode and Save Firebase Credentials
        run: |
          echo "${{ secrets.FIREBASE_CREDENTIALS }}" | base64 -d > ./firebase-adminsdk.json
          ls -l ./firebase-adminsdk.json # Verify file creation
          # Add a basic check to ensure the file is valid JSON
          python -c "import json; json.load(open('firebase-adminsdk.json'))" || echo "Invalid Firebase JSON"
        env:
          FIREBASE_CREDENTIALS: ${{ secrets.FIREBASE_CREDENTIALS }}

      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Configure Docker
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev

      - name: Build Docker image
        run: |
          docker build -t ${{ env.IMAGE_NAME }} .
        continue-on-error: false

      - name: Push Docker image
        run: |
          docker push ${{ env.IMAGE_NAME }}
        continue-on-error: false

      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }} \
            --image=${{ env.IMAGE_NAME }} \
            --platform=managed \
            --region=${{ env.REGION }} \
            --allow-unauthenticated \
            --service-account=firebase-adminsdk-h65me@${{ env.PROJECT_ID }}.iam.gserviceaccount.com \
            --timeout=800s \
            --set-env-vars="GOOGLE_APPLICATION_CREDENTIALS=/app/firebase-adminsdk.json" \
            --set-env-vars="OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" \
            --set-env-vars="GOOGLE_CLOUD_PROJECT=${{ env.PROJECT_ID }}" \
            --quiet
        continue-on-error: false

      - name: Verify Deployment
        run: |
          URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region ${{ env.REGION }} \
            --format="value(status.url)")
          echo "Service deployed at: $URL"
          # Test the endpoint to ensure Firebase is working (adjust the endpoint as needed)
          curl -I $URL || echo "URL check failed, but deployment may still be valid"
        continue-on-error: true

      - name: Clean up
        if: always()
        run: |
          rm -f ./firebase-adminsdk.json
          docker image prune -f
